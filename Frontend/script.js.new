// API Configuration
const API_URL = 'http://localhost/Lost%20and%20Found%20System/Backend/api.php';

// Load items from backend
async function loadItems() {
    const container = document.querySelector('.items-grid');
    container.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading items...</div>';
    
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        const response = await fetch(`${API_URL}?endpoint=items`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            },
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const items = await response.json();
        displayItems(items);
        updateStats(items);
    } catch (error) {
        console.error('Error loading items:', error);
        container.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                <p>Failed to load items. ${error.name === 'AbortError' ? 'Connection timed out.' : 'Please try again.'}</p>
                <button onclick="loadItems()">Retry</button>
            </div>`;
    }
}

// Display items in the grid
function displayItems(items) {
    const container = document.querySelector('.items-grid');
    if (!items || items.length === 0) {
        container.innerHTML = '<p>No items found</p>';
        return;
    }

    container.innerHTML = items.map(item => `
        <div class="item-card" data-id="${item.id}">
            <div class="item-image">
                <img src="${item.image_url === 'bottle.png' ? 'images/bottle.png' : 
                    item.image_url.startsWith('http') ? item.image_url : `${API_URL.replace('api.php', '')}uploads/${item.image_url}`}" alt="${item.name}">
            </div>
            <div class="item-details">
                <h3>${item.name}</h3>
                <p class="description">${item.description}</p>
                <p><i class="fas fa-map-marker-alt"></i> ${item.location}</p>
                <p><i class="fas fa-calendar-alt"></i> ${new Date(item.date_found).toLocaleDateString()}</p>
                <p><strong>Status:</strong> <span class="status-${item.status}">${item.status}</span></p>
                ${item.status === 'lost' 
                    ? `<button class="claim-btn" onclick="showClaimForm(${item.id})">Claim Item</button>`
                    : item.status === 'pending'
                    ? `<button class="claim-btn" disabled style="background-color: #999;">Pending Approval</button>`
                    : `<button class="claim-btn" disabled style="background-color: #999;">Item ${item.status === 'returned' ? 'Returned' : 'Processing'}</button>`
                }
            </div>
        </div>
    `).join('');
}

// Update statistics
function updateStats(items) {
    const itemsFoundCount = document.getElementById('items-found-count');
    const itemsReturnedCount = document.getElementById('items-returned-count');
    
    if (itemsFoundCount) {
        itemsFoundCount.textContent = items.length;
    }
    if (itemsReturnedCount) {
        itemsReturnedCount.textContent = items.filter(item => item.status === 'returned').length;
    }
}

// Handle report form submission
async function handleReportSubmission(event) {
    event.preventDefault();
    
    // Create FormData object for multipart/form-data submission
    const formData = new FormData();
    
    // Add reporter details
    formData.append('reporter_name', document.getElementById('reporter-name').value);
    formData.append('reporter_grade', document.getElementById('reporter-grade').value);
    formData.append('reporter_section', document.getElementById('reporter-section').value);

    // Add item details
    formData.append('name', document.getElementById('item-name').value);
    formData.append('location', document.getElementById('location').value);
    formData.append('date_found', document.getElementById('date_found').value);
    formData.append('description', document.getElementById('description').value);
    
    // Get the actual file from the input
    const imageFile = document.getElementById('image').files[0];
    if (imageFile) {
        formData.append('image', imageFile);
    }

    try {
        const response = await fetch(`${API_URL}?endpoint=report`, {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            alert('Item reported successfully!');
            event.target.reset();
            document.getElementById('display-image').src = 'images/bottle.png';
            loadItems();
        } else {
            const error = await response.json();
            alert('Error: ' + (error.error || 'Failed to submit report'));
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error submitting form');
    }
}

// Handle claim form submission
async function handleClaimSubmission(event) {
    event.preventDefault();
    
    const formData = {
        itemId: currentItemId,
        student_name: document.getElementById('student-name').value,
        grade_level: document.getElementById('student-grade').value,
        section: document.getElementById('student-section').value,
        proof_message: document.getElementById('claim-message').value
    };

    try {
        const response = await fetch(`${API_URL}?endpoint=claim`, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error('Failed to submit claim');
        }

        document.getElementById('form-status').innerHTML =
            '<div class="success">Claim submitted successfully! We will review your claim and contact you soon.</div>';
        
        setTimeout(() => {
            document.getElementById('notification-popup').style.display = 'none';
            event.target.reset();
            loadItems(); // Refresh the items list
        }, 3000);

    } catch (error) {
        console.error('Error:', error);
        document.getElementById('form-status').innerHTML =
            `<div class="error">Error submitting claim: ${error.message}</div>`;
    }
}

// Handle browser back button
window.addEventListener('popstate', function(e) {
    if (e.state && e.state.section) {
        showSection(e.state.section);
    }
});

// Function to show a section
function showSection(sectionId) {
    // Update active nav link
    document.querySelectorAll('nav a').forEach(navLink => {
        navLink.classList.remove('active');
        if (navLink.getAttribute('data-section') === sectionId) {
            navLink.classList.add('active');
        }
    });
    
    // Show selected section
    document.querySelectorAll('main section').forEach(section => {
        section.style.display = section.id === sectionId ? 'block' : 'none';
    });
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    // Load items with loading indicator
    const itemsGrid = document.querySelector('.items-grid');
    if (itemsGrid) {
        itemsGrid.innerHTML = '<div class="loading">Loading items...</div>';
    }
    loadItems();
    
    // Set up navigation with touch support
    document.querySelectorAll('nav a, .report-btn').forEach(link => {
        const handler = function(e) {
            e.preventDefault();
            
            const targetSection = this.getAttribute('data-section');
            history.pushState({ section: targetSection }, '', `#${targetSection}`);
            showSection(targetSection);
        };
        
        // Add both click and touch events
        link.addEventListener('click', handler);
        link.addEventListener('touchend', handler);
    });
    
    // Set up form submissions
    const reportForm = document.getElementById('report-form');
    if (reportForm) {
        reportForm.addEventListener('submit', handleReportSubmission);
    }
    
    const claimForm = document.getElementById('claim-form');
    if (claimForm) {
        claimForm.addEventListener('submit', handleClaimSubmission);
    }
    
    // Set up image preview
    const imageInput = document.getElementById('image');
    if (imageInput) {
        imageInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('display-image').src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // Set up claim popup close button
    const closeBtn = document.querySelector('.close-btn');
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            document.getElementById('notification-popup').style.display = 'none';
            document.getElementById('form-status').innerHTML = '';
        });
    }
});

// Show claim form
let currentItemId = null;

function showClaimForm(itemId) {
    currentItemId = itemId;
    document.getElementById('notification-popup').style.display = 'flex';
    document.getElementById('form-status').innerHTML = '';
}
